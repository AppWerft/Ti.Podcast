/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.podcast;

import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.List;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import android.os.AsyncTask;

@Kroll.module(name = "Tipodcast", id = "de.appwerft.podcast")
public class TipodcastModule extends KrollModule {
	// Standard Debugging variables
	private static final String LCAT = "HTMLScraper";
	public KrollFunction mCallback;

	public TipodcastModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
	}

	@Kroll.method
	public void loadPodcast(final KrollDict options,
			final @Kroll.argument(optional = true) KrollFunction mCallback) {
		AsyncTask<Void, Void, Void> doRequest = new AsyncTask<Void, Void, Void>() {
			@Override
			protected Void doInBackground(Void[] arg0) {
				int timeout = 10000;
				String url = null;
				String userAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:46.0) Gecko/20100101 Firefox/46.0";
				/* reading of proxy properties: */
				if (options.containsKey("timeout")) {
					timeout = options.getInt("timeout");
				}
				if (options.containsKey(TiC.PROPERTY_URL)) {
					url = options.getString(TiC.PROPERTY_URL);
				}
				if (options.containsKey("userAgent")) {
					userAgent = options.getString("userAgent");
				}
				KrollDict data = new KrollDict();
				try {
					Document doc = Jsoup.connect(url).userAgent(userAgent)
							.timeout(timeout).ignoreContentType(true).get();
					final String[] keys = { "title", "description", "link",
							"category", "copyright", "pubDate",
							"lastBuildDate", "itunes|subtitle" };
					for (String key : keys) {
						data.put(key.replace("itunes|", ""),
								doc.select("channel > " + key).first().text());
					}
					List<KrollDict> items = new ArrayList<KrollDict>();
					Elements elements = doc.select("channel > item");
					for (Element element : elements) {
						KrollDict o = new KrollDict();
						final String[] subkeys = { "title", "description",
								"link", "itunes/author", "itunes|duration",
								"pubDate", "itunes|subtitle", "guid" };
						for (String subkey : subkeys) {
							o.put(subkey.replace("itunes|", ""), element
									.select(subkey).first().text());
						}
						KrollDict enclosure = new KrollDict();
						enclosure.put("url",
								element.select("enclosure").attr("url"));
						enclosure.put("length", element.select("enclosure")
								.attr("length"));
						enclosure.put("type",
								element.select("enclosure").attr("type"));
						o.put("enclosure", enclosure);
						items.add(o);
					}
					data.put("items", items.toArray());
					mCallback.call(getKrollObject(), data);
				} catch (MalformedURLException e) {
					data.put("error", "MalformedURLException");
					mCallback.call(getKrollObject(), data);
					e.printStackTrace();
				} catch (IOException e) {
					data.put("error", "IOException");
					mCallback.call(getKrollObject(), data);
					e.printStackTrace();
				}
				return null;
			}
		};
		doRequest.execute();
	}
}
